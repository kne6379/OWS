// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["omitApi"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int      @id @default(autoincrement()) @map("user_id")
  email        String   @unique @map("email")
  password     String   @map("password")
  nickName     String   @unique @map("nick_name")
  role         UserRole @default(COMMON) @map("role")
  refreshToken String?   @map("refresh_token")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  profile Profile?
  feed    Feed[]
  comment Comment[]

  @@map("users")
}

model Profile {
  profileId       Int      @id @default(autoincrement()) @map("profile_id")
  userId          Int      @unique @map("user_id")
  showLog         Boolean  @default(true) @map("show_log")
  nickName        String   @map("nick_name")
  introduce       String?  @map("introduce")
  profile_img_url String?  @map("profile_img_url")
  maxweight       Int?     @map("maxweight")
  weight          Float?   @map("weight")
  height          Float?   @map("height")
  muscleweight    Float?   @map("muscleweight")
  fat             Float?   @map("fat")
  metabolic       Int?     @map("metabolic")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  user User  @relation(fields: [userId], references: [userId])
  log  Log[]

  @@map("profile")
}

model Feed {
  feedId       Int      @id @default(autoincrement()) @map("feed_id")
  userId       Int      @map("user_id")
  title        String   @map("title")
  feed_img_url String   @map("feed_img_url")
  nickName     String   @map("nick_name")
  content      String   @map("content") @db.Text
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  user    User      @relation(fields: [userId], references: [userId])
  comment Comment[]

  @@map("feeds")
}

model Comment {
  commentId Int      @id @default(autoincrement()) @map("comment_id")
  feedId    Int      @map("feed_id")
  userId    Int      @map("user_id")
  comment   String   @map("comment") @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [userId])
  feed Feed @relation(fields: [feedId], references: [feedId])

  @@map("comments")
}

model Log {
  logId       Int      @id @default(autoincrement()) @map("log_id")
  profileId   Int      @map("profile_id")
  changeField String   @map("change_field")
  oldValue    String?  @map("old_value")
  newValue    String   @map("new_value")
  updatedAt   DateTime @updatedAt @map("updated_at")

  profile Profile @relation(fields: [profileId], references: [profileId])

  @@map("logs")
}

enum UserRole {
  COMMON
  ADMIN
}
